name: Process Site Suggestions
on:
  issues:
    types: [labeled]
  workflow_dispatch:

jobs:
  debug-labels:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    outputs:
      has_site_suggestion: ${{ steps.check-labels.outputs.has_site_suggestion }}
      has_approved: ${{ steps.check-labels.outputs.has_approved }}
      all_labels: ${{ steps.check-labels.outputs.all_labels }}
    steps:
      - name: Check labels
        id: check-labels
        run: |
          echo "Event action: ${{ github.event.action }}"
          echo "All labels: ${{ toJson(github.event.issue.labels) }}"
          
          # Get all label names
          LABEL_NAMES=$(echo '${{ toJson(github.event.issue.labels) }}' | jq -r '.[].name' | tr '\n' ',' | sed 's/,$//')
          echo "Label names: $LABEL_NAMES"
          
          # Check for site-suggestion label (case insensitive)
          if echo "$LABEL_NAMES" | grep -qi "site-suggestion"; then
            echo "‚úÖ Found site-suggestion label"
            echo "has_site_suggestion=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No site-suggestion label found"
            echo "has_site_suggestion=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for approved label (case insensitive)
          if echo "$LABEL_NAMES" | grep -qi "approved"; then
            echo "‚úÖ Found approved label"
            echo "has_approved=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No approved label found"
            echo "has_approved=false" >> $GITHUB_OUTPUT
          fi
          
          echo "all_labels=$LABEL_NAMES" >> $GITHUB_OUTPUT

  process-suggestion:
    needs: debug-labels
    if: needs.debug-labels.outputs.has_site_suggestion == 'true' && needs.debug-labels.outputs.has_approved == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Debug why job is running
        run: |
          echo "üéâ Job is running because:"
          echo "has_site_suggestion: ${{ needs.debug-labels.outputs.has_site_suggestion }}"
          echo "has_approved: ${{ needs.debug-labels.outputs.has_approved }}"
          echo "all_labels: ${{ needs.debug-labels.outputs.all_labels }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract site information from issue
        id: extract
        run: |
          ISSUE_BODY=$(cat << 'EOF'
          ${{ github.event.issue.body }}
          EOF
          )
          
          echo "üìù Extracting site information from issue #${{ github.event.issue.number }}..."
          echo "Issue Title: ${{ github.event.issue.title }}"
          
          # Extract using the exact format from your site suggestions
          SITE_NAME=$(echo "$ISSUE_BODY" | grep "**Site Name:**" | head -1 | sed 's/**Site Name:**//' | xargs)
          SITE_URL=$(echo "$ISSUE_BODY" | grep "**URL:**" | head -1 | sed 's/**URL:**//' | xargs)
          SITE_CATEGORY=$(echo "$ISSUE_BODY" | grep "**Category:**" | head -1 | sed 's/**Category:**//' | xargs)
          SITE_ICON=$(echo "$ISSUE_BODY" | grep "**Icon URL:**" | head -1 | sed 's/**Icon URL:**//' | xargs)
          SITE_DESCRIPTION=$(echo "$ISSUE_BODY" | grep "**Description:**" | head -1 | sed 's/**Description:**//' | xargs)
          
          echo "üîç Extracted values:"
          echo "Name: '$SITE_NAME'"
          echo "URL: '$SITE_URL'"
          echo "Category: '$SITE_CATEGORY'"
          echo "Icon: '$SITE_ICON'"
          echo "Description: '$SITE_DESCRIPTION'"
          
          # Map category to status code (handle lowercase)
          CATEGORY_UPPER=$(echo "$SITE_CATEGORY" | tr '[:lower:]' '[:upper:]')
          case "$CATEGORY_UPPER" in
            "MANGA") STATUS=1 ;;
            "LIGHT NOVEL"|"LN") STATUS=2 ;;
            "MOVIE") STATUS=3 ;;
            "APP") STATUS=4 ;;
            "ANIME") STATUS=5 ;;
            "LEARNING") STATUS=6 ;;
            "NSFW") STATUS=7 ;;
            *) STATUS=0 ;;
          esac
          
          # Generate provider key (safe version)
          PROVIDER_KEY=$(echo "$SITE_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/[^a-z0-9_]//g')Provider
          
          echo "provider_key=$PROVIDER_KEY" >> $GITHUB_OUTPUT
          echo "site_name=$SITE_NAME" >> $GITHUB_OUTPUT
          echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT
          echo "site_status=$STATUS" >> $GITHUB_OUTPUT
          echo "site_icon=$SITE_ICON" >> $GITHUB_OUTPUT
          echo "site_description=$SITE_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Validate extracted data
        run: |
          echo "‚úÖ Validating extracted data..."
          echo "Site Name: '${{ steps.extract.outputs.site_name }}'"
          echo "Site URL: '${{ steps.extract.outputs.site_url }}'"
          echo "Site Status: '${{ steps.extract.outputs.site_status }}'"
          
          if [ -z "${{ steps.extract.outputs.site_name }}" ]; then
            echo "‚ùå Error: Site name is empty"
            exit 1
          fi
          if [ -z "${{ steps.extract.outputs.site_url }}" ]; then
            echo "‚ùå Error: Site URL is empty"
            exit 1
          fi
          if [ "${{ steps.extract.outputs.site_status }}" = "0" ]; then
            echo "‚ö†Ô∏è Warning: Unknown category '${{ steps.extract.outputs.site_category }}', using status 0"
          fi
          echo "üéâ Data validation passed"

      - name: Add site to providers.json
        run: |
          echo "üìù Adding site to providers.json..."
          node .github/scripts/add-site.js \
            --key "${{ steps.extract.outputs.provider_key }}" \
            --name "${{ steps.extract.outputs.site_name }}" \
            --url "${{ steps.extract.outputs.site_url }}" \
            --status "${{ steps.extract.outputs.site_status }}" \
            --icon "${{ steps.extract.outputs.site_icon }}" \
            --description "${{ steps.extract.outputs.site_description }}" \
            --issue "${{ steps.extract.outputs.issue_number }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GIT_TOKEN }}
          commit-message: "Add site: ${{ steps.extract.outputs.site_name }}"
          title: "Add ${{ steps.extract.outputs.site_name }} to index"
          body: |
            This PR automatically adds **${{ steps.extract.outputs.site_name }}** to the website index.
            
            - **Site:** ${{ steps.extract.outputs.site_name }}
            - **URL:** ${{ steps.extract.outputs.site_url }}
            - **Category:** ${{ steps.extract.outputs.site_status }}
            - **Issue:** #${{ steps.extract.outputs.issue_number }}
            
            Auto-generated from approved site suggestion.
          branch: "add-site-${{ steps.extract.outputs.issue_number }}"
          delete-branch: true

      - name: Comment on issue
        if: steps.create-pr.outputs.pull-request-number != ''
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pull-request-number }};
            console.log(`Creating comment for PR #${prNumber}`);
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.extract.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Site suggestion processed! A pull request has been automatically created: #${prNumber}`
            });
            
            // Remove approved label and add processed label
            await github.rest.issues.removeLabel({
              issue_number: ${{ steps.extract.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'approved'
            });
            
            await github.rest.issues.addLabels({
              issue_number: ${{ steps.extract.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['processed', 'auto-pr-created']
            });

      - name: Handle failures
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Automated processing failed. Please check the workflow run for details and process manually.`
            });

  debug-skipped:
    if: always() && needs.debug-labels.outputs.has_site_suggestion == 'false' || needs.debug-labels.outputs.has_approved == 'false'
    needs: debug-labels
    runs-on: ubuntu-latest
    steps:
      - name: Debug why job was skipped
        run: |
          echo "üîç Job was skipped because:"
          echo "has_site_suggestion: ${{ needs.debug-labels.outputs.has_site_suggestion }}"
          echo "has_approved: ${{ needs.debug-labels.outputs.has_approved }}"
          echo "all_labels: ${{ needs.debug-labels.outputs.all_labels }}"
          echo "event_action: ${{ github.event.action }}"
          echo "To trigger this job, ensure the issue has both 'site-suggestion' and 'approved' labels"
