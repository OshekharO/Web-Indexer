name: Automated Health Checks
on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # No cache since we don't have package-lock.json

      - name: Run health check (Node.js version)
        id: health-check
        run: node .github/scripts/health-check-simple.js
        continue-on-error: true

      - name: Create health report issue
        if: always() && steps.health-check.outputs.broken_count != '0'
        uses: actions/github-script@v6
        with:
          script: |
            const brokenSites = `${{ steps.health-check.outputs.broken_sites }}`.split(',').filter(s => s.trim());
            const totalSites = `${{ steps.health-check.outputs.total_sites }}`;
            const brokenCount = brokenSites.length;
            
            let body = `## 🩺 Health Check Report\n\n`;
            body += `**Date:** ${new Date().toISOString().split('T')[0]}\n`;
            body += `**Total Sites Checked:** ${totalSites}\n`;
            body += `**Sites Having Issues:** ${brokenCount}\n\n`;
            
            if (brokenCount > 0) {
              body += `### ❌ Sites Needing Attention:\n\n`;
              brokenSites.forEach(site => {
                if (site.trim()) {
                  body += `- ${site}\n`;
                }
              });
              
              body += `\n### 🔧 Next Steps:\n`;
              body += `1. Verify these sites manually\n`;
              body += `2. Update URLs if sites have moved\n`;
              body += `3. Remove sites if permanently down\n`;
              body += `4. Add alternative mirrors if available\n`;
            } else {
              body += `### ✅ All sites are healthy!`;
            }
            
            // Create or update health report issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['health-report', 'automated'],
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: `Health Report: ${brokenCount}/${totalSites} Sites Having Issues`,
                body: body
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Health Report: ${brokenCount}/${totalSites} Sites Having Issues`,
                body: body,
                labels: ['health-report', 'automated']
              });
            }
